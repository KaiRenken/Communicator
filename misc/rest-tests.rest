### Create new chat with bad argument

POST http://localhost:8080/api/chat
Accept: application/json
Content-Type: application/json

{
  "name": ""
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400);
        client.assert(response.body.msg === "Chat.name must not be empty");
    });
%}

### Create new chat successfully

POST http://localhost:8080/api/chat
Accept: application/json
Content-Type: application/json

{
  "name": "test-chat"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201);
        client.assert(response.body.name === "test-chat");
    });

    client.global.set("chat-id", response.body.id)
%}

### Get all chats

GET http://localhost:8080/api/chat

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200);
        client.assert(response.body.length === 1);
        client.assert(response.body[0].name === "test-chat");
    });
%}

### Create new message with bad argument

POST http://localhost:8080/api/message
Accept: application/json
Content-Type: application/json

{
  "chatId": "{{chat-id}}",
  "content": ""
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400);
        client.assert(response.body.msg === "Message.content must not be empty");
    });
%}

### Create new message with non-existing chat

POST http://localhost:8080/api/message
Accept: application/json
Content-Type: application/json

{
  "chatId": "2147aad6-d830-11ed-afa1-0242ac120002",
  "content": "test-content"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 404);
        client.assert(response.body.msg === "Chat with id 2147aad6-d830-11ed-afa1-0242ac120002 does not exist");
    });
%}

### Create new message successfully

POST http://localhost:8080/api/message
Accept: application/json
Content-Type: application/json

{
  "chatId": "{{chat-id}}",
  "content": "test-content"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201);
        client.assert(response.body.content === "test-content");
    });

    client.global.set("message-id", response.body.id)
%}

### Get all messages from chat

GET http://localhost:8080/api/message/{{chat-id}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200);
        client.assert(response.body.length === 1);
        client.assert(response.body[0].content === "test-content");
    });
%}